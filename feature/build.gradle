apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
//自定义项目内插件
//apply plugin: 'com.sst.projectplugin'
///自定义插件
//apply plugin: 'com.sst.plugin'

android {
    compileSdkVersion 32
    defaultConfig {
        applicationId "sst.example.androiddemo.feature"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        externalNativeBuild {
//            cmake {
//                cppFlags ""
//                abiFilters "armeabi-v7a","x86_64"
//            }
//        }
//        ndk {
//            abiFilters "armeabi-v7a","x86_64"
//        }
    }
//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//        }
//    }

//    build出错不停止
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        ///kotlin 编译版本
        kotlinOptions{
            jvmTarget = '1.8'
        }
    }
    packagingOptions {
        ///移除重复文件，非打包文件
//       exclude '重复文件'
    }

    //  使用子module的libs的文件与下面的fileTree 配合使用
    // repositories {
    //    flatDir {
    //        dirs project(':rammus').file('libs')
    //    }
    //    flatDir {
    //        dirs 'libs','../rammus/libs'
    //        }
//     }
}

dependencies {
    //将libs下的jar,aar都进行依赖，再次声明aar api('a.aar',ext:"aar")会重复引入
//    implementation fileTree(include: ['*.jar','*.aar'], dir: 'libs')

    //将libs下的jar都进行依赖
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    api 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.lifecycle:lifecycle-runtime:2.3.1"
    api 'androidx.constraintlayout:constraintlayout:2.0.4'
    api 'androidx.recyclerview:recyclerview:1.2.0'
    api 'androidx.dynamicanimation:dynamicanimation:1.1.0-alpha03'
    api 'androidx.core:core-ktx:1.7.0-alpha01'
    //    视频编辑
    implementation 'com.github.yangjie10930:EpMedia:v0.9.5'
   




    // CameraX core library using the camera2 implementation
    def camerax_version = "1.1.0-alpha03"
    // The following line is optional, as the core library is included indirectly by camera-camera2
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    // If you want to additionally use the CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    // If you want to additionally use the CameraX View class
    implementation "androidx.camera:camera-view:1.0.0-alpha17"
    // If you want to additionally use the CameraX Extensions library
    implementation "androidx.camera:camera-extensions:1.0.0-alpha17"

    implementation 'com.airbnb.android:lottie:3.6.0'

}

task getIPConfig(type: Exec) {
    commandLine "java", "-version"
//    commandLine "if", "config"
//    commandLine "git", "--version"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task emptyTask() {
    println("emptyTask ===== ")
}
task getGitVersion(dependsOn: 'getIPConfig') {
    def out = tasks.getIPConfig.output()
    println("out is " + out)
}

task beforeBuild{
    println "this is first"
}

build.dependsOn beforeBuild