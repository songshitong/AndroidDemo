<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools"
        tools:context=".widget.layout.constraint.ConstrainLayoutActivity"
        android:layout_width="match_parent"
        android:layout_height="match_parent">
    <LinearLayout
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_marginVertical="20dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">
            <androidx.appcompat.widget.AppCompatTextView
                app:layout_constraintLeft_toLeftOf="parent"
                app:layout_constraintRight_toRightOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                android:id="@+id/constraint_test_text"
                android:text="this is test text"
                android:textSize="20sp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <sst.example.androiddemo.feature.widget.layout.constraint.AnimConstraintHelper
                app:layout_constraintLeft_toLeftOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                app:constraint_referenced_ids="constraint_test_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
        </androidx.constraintlayout.widget.ConstraintLayout>
        <LinearLayout
            android:orientation="vertical"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">
            <TextView
                android:text="占父类的一半，并居中"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <androidx.constraintlayout.widget.ConstraintLayout
                android:layout_width="match_parent"
                android:background="@android:color/holo_green_light"
                android:layout_height="100dp">
                <View
                    android:id="@+id/constrain_view1"
                    android:background="@android:color/holo_red_light"
                    app:layout_constraintLeft_toLeftOf="parent"
                    app:layout_constraintRight_toRightOf="parent"
                    app:layout_constraintTop_toTopOf="parent"
                    app:layout_constraintBottom_toBottomOf="parent"
                    app:layout_constraintHeight_default="percent"
                    app:layout_constraintHeight_percent=".5"
                    app:layout_constraintWidth_percent=".5"
                    android:layout_width="0dp"
                    android:layout_height="0dp"/>
            </androidx.constraintlayout.widget.ConstraintLayout>
        </LinearLayout>
        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            >
            <!--    https://mp.weixin.qq.com/s/aALMKR68wBzLcinamlUw7g    -->
            <!--        https://juejin.cn/post/6949186887609221133-->
            <TextView
                android:id="@+id/tv1"
                app:layout_constraintTop_toTopOf="parent"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="宽高固定比例视图:宽度满屏，高度按比例"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <ImageView
                android:id="@+id/imageView1"
                app:layout_constraintTop_toBottomOf="@id/tv1"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_blue_light"
                android:layout_width="match_parent"
                android:layout_height="0dp"/>
            <TextView
                android:id="@+id/tv2"
                app:layout_constraintTop_toBottomOf="@id/imageView1"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="N等分布局1:每一个占父的0.3"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        N等分布局1:每一个占父的0.3  layout_constraintWidth_percent-->
            <!--            0dp根据layout_constraintWidth_default设置不同，有不同的效果-->
            <!--            spread（默认）：占用所有的符合约束的空间，可以不写-->
            <!--            percent：按照父布局的百分比设置-->
            <!--              app:layout_constraintWidth_default="percent" 可省略-->
            <!--              app:layout_constraintWidth_percent="0.5"-->
            <!--            wrap：匹配内容大小但不超过约束限制-->
            <!--               效果等同于-->
            <!--  当一个view的宽或高,设置成wrap_content时  -->
            <!--                    app:layout_constrainedWidth="true|false"-->
            <!--                    app:layout_constrainedHeight="true|false"-->
            <!--           0dp下设置最大，最小-->
            <!--                app:layout_constraintWidth_min=""   0dp下，宽度的最小值-->
            <!--                app:layout_constraintWidth_max=""   0dp下，宽度的最大值-->
            <!--        N等分布局2:均分父布局  去掉layout_constraintWidth_percent-->
            <ImageView
                android:id="@+id/imageView2"
                app:layout_constraintTop_toBottomOf="@id/tv2"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toStartOf="@id/imageView3"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_blue_light"
                android:layout_width="0dp"
                app:layout_constraintWidth_percent="0.3"
                android:layout_height="0dp"/>
            <ImageView
                android:id="@+id/imageView3"
                app:layout_constraintTop_toBottomOf="@id/tv2"
                app:layout_constraintStart_toEndOf="@id/imageView2"
                app:layout_constraintEnd_toStartOf="@id/imageView4"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_orange_light"
                android:layout_width="0dp"
                app:layout_constraintWidth_percent="0.3"
                android:layout_height="0dp"/>
            <ImageView
                android:id="@+id/imageView4"
                app:layout_constraintTop_toBottomOf="@id/tv2"
                app:layout_constraintStart_toEndOf="@id/imageView3"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_blue_light"
                android:layout_width="0dp"
                app:layout_constraintWidth_percent="0.3"
                android:layout_height="0dp"/>
            <TextView
                android:id="@+id/tv3"
                app:layout_constraintTop_toBottomOf="@id/imageView4"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="权重分配：1:2"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        app:layout_constraintHorizontal_weight-->
            <ImageView
                android:id="@+id/imageView5"
                app:layout_constraintTop_toBottomOf="@id/tv3"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toStartOf="@id/imageView6"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_blue_light"
                android:layout_width="0dp"
                app:layout_constraintHorizontal_weight="1"
                android:layout_height="0dp"/>
            <ImageView
                android:id="@+id/imageView6"
                app:layout_constraintTop_toBottomOf="@id/tv3"
                app:layout_constraintStart_toEndOf="@id/imageView5"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_orange_light"
                android:layout_width="0dp"
                app:layout_constraintHorizontal_weight="2"
                android:layout_height="0dp"/>
            <TextView
                android:id="@+id/tv4"
                app:layout_constraintTop_toBottomOf="@id/imageView6"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="基线对齐：让两个不同大小的文案基线对齐"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        layout_constraintBaseline_toBaselineOf-->
            <TextView
                android:id="@+id/tv5"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="20"
                android:textSize="50sp"
                android:textStyle="bold"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/tv4" />

            <TextView
                android:id="@+id/tv6"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="¥"
                android:textSize="20sp"
                app:layout_constraintBaseline_toBaselineOf="@id/tv5"
                app:layout_constraintStart_toEndOf="@id/tv5" />
            <TextView
                android:id="@+id/tv7"
                app:layout_constraintTop_toBottomOf="@id/tv6"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="角度约束：一个控件在某个控件的45度"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        app:layout_constraintCircle=""         目标控件id-->
            <!--        app:layout_constraintCircleAngle=""    对于目标的角度(0-360)-->
            <!--        app:layout_constraintCircleRadius=""   到目标中心的距离-->
            <TextView
                android:id="@+id/tv8"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="40dp"
                android:layout_marginLeft="20dp"
                android:text="11"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/tv7" />

            <TextView
                android:id="@+id/tv9"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="11的45度"
                app:layout_constraintCircle="@id/tv8"
                app:layout_constraintCircleAngle="45"
                app:layout_constraintCircleRadius="40dp"
                tools:ignore="MissingConstraints" />
            <TextView
                android:id="@+id/tv10"
                app:layout_constraintTop_toBottomOf="@id/tv9"
                app:layout_constraintLeft_toLeftOf="parent"
                android:layout_marginTop="30dp"
                android:text="百分比偏移：控件在父布局的水平方向或垂直方向的百分之多少"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        app:layout_constraintHorizontal_bias=""   水平偏移 取值范围是0-1的小数-->
            <TextView
                android:id="@+id/tv11"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="1111"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="0.3"
                app:layout_constraintTop_toBottomOf="@id/tv10" />
            <TextView
                android:id="@+id/tv12"
                app:layout_constraintTop_toBottomOf="@id/tv11"
                app:layout_constraintLeft_toLeftOf="parent"
                android:layout_marginTop="30dp"
                android:text="隐藏边距：当依赖的目标view隐藏时会生效"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        layout_goneMarginLeft-->
            <TextView
                android:id="@+id/tv13"
                app:layout_constraintTop_toBottomOf="@id/tv12"
                app:layout_constraintLeft_toLeftOf="parent"
                android:layout_marginStart="100dp"
                android:text="隐藏"
                android:visibility="invisible"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <TextView
                android:id="@+id/tv14"
                app:layout_constraintTop_toBottomOf="@id/tv12"
                app:layout_constraintStart_toEndOf="@id/tv13"
                app:layout_goneMarginLeft="50dp"
                android:text="在隐藏右侧50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <TextView
                android:id="@+id/tv15"
                app:layout_constraintTop_toBottomOf="@id/tv14"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="宽度约束：wrap模式 自动回行"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        app:layout_constraintWidth_default="wrap"-->
            <TextView
                android:id="@+id/tv16"
                app:layout_constraintTop_toBottomOf="@id/tv15"
                android:layout_marginStart="100dp"
                android:layout_marginEnd="100dp"
                app:layout_constraintLeft_toLeftOf="parent"
                app:layout_constraintRight_toRightOf="parent"
                android:text="AAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                app:layout_constraintWidth_default="wrap"
                android:layout_width="0dp"
                android:layout_height="wrap_content"/>
            <TextView
                android:id="@+id/tv17"
                app:layout_constraintTop_toBottomOf="@id/tv16"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="chains:将许多个控件在某方向形成一条链然后进行控制"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        链条生成，首尾互相约束-->
            <!--        链条的style，第一个元素 head-->
            <!--          spread  均分剩余空间；一个元素自动居中，注意隐式的链条-->
            <!--          spread_inside：两侧的控件贴近两边，剩余的控件均分剩余空间-->
            <!--          packed：所有控件贴紧居中-->
            <!--            可以通过layout_constraintHorizontal_weight控制链条上部件的权重weight-->
            <ImageView
                android:id="@+id/imageView7"
                app:layout_constraintTop_toBottomOf="@id/tv17"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toStartOf="@id/imageView8"
                app:layout_constraintDimensionRatio="1:0.618"
                app:layout_constraintHorizontal_chainStyle="spread_inside"
                android:src="@android:color/holo_orange_light"
                android:layout_width="100dp"
                android:layout_height="0dp"/>
            <ImageView
                android:id="@+id/imageView8"
                app:layout_constraintTop_toBottomOf="@id/tv17"
                app:layout_constraintStart_toEndOf="@id/imageView7"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_blue_light"
                android:layout_width="100dp"
                android:layout_height="0dp"/>
            <TextView
                android:id="@+id/tv18"
                app:layout_constraintTop_toBottomOf="@id/imageView8"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="GuideLines参考线"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        Guideline是一条参考线，可以帮助开发者进行辅助定位，并且实际上它并不会真正显示在布局中，像是数学几何中的辅助线一样，-->
            <!--          使用起来十分方便-->
            <!--        Guideline也可以用来做一些百分比分割之类的需求，有着很好的屏幕适配效果，Guideline有水平和垂直方向之分，-->
            <!--         位置可以使用针对父级的百分比或者针对父级位置的距离-->
            <!--        android:orientation="horizontal|vertical"  辅助线的对齐方式-->
            <!--        app:layout_constraintGuide_percent="0-1"   距离父级宽度或高度的百分比(小数形式)-->
            <!--        app:layout_constraintGuide_begin=""        距离父级起始位置的距离(左侧或顶部)-->
            <!--        app:layout_constraintGuide_end=""          距离父级结束位置的距离(右侧或底部)-->
            <androidx.constraintlayout.widget.Guideline
                android:id="@+id/guideline1"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                app:layout_constraintGuide_begin="206dp"
                />
            <ImageView
                android:id="@+id/imageView9"
                app:layout_constraintTop_toBottomOf="@id/tv18"
                app:layout_constraintStart_toEndOf="@id/guideline1"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_blue_light"
                android:layout_width="100dp"
                android:layout_height="0dp"/>
            <TextView
                android:id="@+id/tv19"
                app:layout_constraintTop_toBottomOf="@id/imageView9"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="Barrier屏障"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        Barrier，不会实际出现在布局中，它的作用如同其名，形成一个屏障、障碍-->
            <!--         应用场景1 左右两个布局，左侧有两个，但是不同情况下长度不一样，右侧如何依赖呢？-->
            <!--                  可以使用Barrier，他会取指定view的最大值，这样右侧布局可以依赖于Barrier-->
            <!--        用于控制Barrier相对于给定的View的位置-->
            <!--        app:barrierDirection="top|bottom|left|right|start|end"-->
            <!--        取值是要依赖的控件的id，Barrier将会使用ids中最大的一个的宽/高作为自己的位置-->
            <!--        app:constraint_referenced_ids="id,id"-->
            <TextView
                android:id="@+id/tv20"
                app:layout_constraintTop_toBottomOf="@id/tv19"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="11"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <TextView
                android:id="@+id/tv21"
                app:layout_constraintTop_toBottomOf="@id/tv20"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="222"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <androidx.constraintlayout.widget.Barrier
                android:id="@+id/barrier"
                app:barrierDirection="end"
                app:constraint_referenced_ids="tv20,tv21"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <TextView
                android:id="@+id/tv22"
                app:layout_constraintTop_toBottomOf="@id/tv19"
                app:layout_constraintLeft_toRightOf="@id/barrier"
                android:text="我在Barrier的右侧"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <TextView
                android:id="@+id/tv23"
                app:layout_constraintTop_toBottomOf="@id/tv21"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="Group组的作用:控制一组隐藏或显示"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        Group的作用就是可以对一组控件同时隐藏或显示-->
            <!--        app:constraint_referenced_ids="id,id"  加入组的控件id-->
            <!--        当Group的visibility为visible时，它们都是正常显示的，设置为gone时-->
            <TextView
                android:id="@+id/tv24"
                app:layout_constraintTop_toBottomOf="@id/tv23"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="Group组的作用1111"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <androidx.constraintlayout.widget.Group
                android:id="@+id/group"
                android:visibility="invisible"
                app:constraint_referenced_ids="tv24"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>

            <TextView
                android:id="@+id/tv25"
                app:layout_constraintTop_toBottomOf="@id/tv23"
                app:layout_constraintLeft_toLeftOf="parent"
                android:layout_marginTop="50dp"
                android:text="Placeholder：占位符，可以动态设置组件到这"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        当设置app:content="@+id/A"或者调用setContent()时，控件A就会被移动到Placeholder中-->
            <TextView
                android:id="@+id/tv26"
                app:layout_constraintTop_toBottomOf="@id/tv25"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="1234"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <androidx.constraintlayout.widget.Placeholder
                android:id="@+id/placeholder"
                app:content="@id/tv26"
                app:layout_constraintTop_toBottomOf="@id/tv25"
                app:layout_constraintEnd_toEndOf="parent"
                android:layout_width="50dp"
                android:layout_height="50dp"/>

            <!--        Flow是用于构建链的新虚拟布局，当链用完时可以缠绕到下一行甚至屏幕的另一部分-->
            <!--        flow的子控件可以不用首尾形成约束，形成链，统一交由flow控制-->
            <!--        Flow是一种虚拟布局。在ConstraintLayout中，虚拟布局(Virtual layouts)作为virtual view group的角色参与约束和布局中，-->
            <!--        但是它们并不会作为视图添加到视图层级结构中，而是仅仅引用其它视图来辅助它们在布局系统中完成各自的布局功能-->
            <!--        flow链约束-->
            <!--        Flow的constraint_referenced_ids关联的控件是没有设置约束的,这种排列方式是Flow的默认方式none-->
            <!--        可以使用app:flow_wrapMode=""属性来设置排列方式，并且我们还可以使用flow_horizontalGap和flow_verticalGap-->
            <!--           分别设置两个view在水平和垂直方向的间隔-->
            <!--        none（默认值）：所有引用的view形成一条链，水平居中，超出屏幕两侧的view不可见-->
            <!--        chain：所引用的view形成一条链，超出部分会自动换行，同行的view会平分宽度-->
            <!--        aligned：所引用的view形成一条链，但view会在同行同列-->
            <!--        当flow_wrapMode的值是chain或aligned时，我们还可以针对不同的链进行配置,flow的宽度最好设为match_parent，不然不生效-->
            <!--        app:flow_horizontalStyle="packed｜spread｜spread_inside"  所有水平链的配置-->
            <!--        app:flow_firstHorizontalStyle="packed｜spread｜spread_inside" 第一条水平链的配置，其他条不生效-->
            <!--        app:flow_lastHorizontalStyle="packed｜spread｜spread_inside"  最后一条水平链的配置，其他条不生效-->
            <TextView
                android:id="@+id/tv27"
                android:layout_marginTop="150dp"
                app:layout_constraintTop_toBottomOf="@id/tv25"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="Flow的链约束"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <ImageView
                android:id="@+id/imageView10"
                app:layout_constraintTop_toBottomOf="@id/tv27"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_blue_light"
                android:layout_width="200dp"
                android:layout_height="0dp"/>
            <ImageView
                android:id="@+id/imageView11"
                app:layout_constraintTop_toBottomOf="@id/tv27"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_orange_light"
                android:layout_width="200dp"
                android:layout_height="0dp"/>
            <ImageView
                android:id="@+id/imageView12"
                app:layout_constraintTop_toBottomOf="@id/tv27"
                app:layout_constraintDimensionRatio="1:0.618"
                android:src="@android:color/holo_blue_light"
                android:layout_width="200dp"
                android:layout_height="0dp"/>
            <androidx.constraintlayout.helper.widget.Flow
                android:id="@+id/flow1"
                app:flow_wrapMode="chain"
                app:flow_firstHorizontalStyle="spread_inside"
                app:layout_constraintTop_toBottomOf="@id/tv27"
                app:constraint_referenced_ids="imageView10,imageView11,imageView12"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"/>

            <!--        Flow 对齐约束-->
            <!--        当view的大小不一致时，可以使用对齐约束-->
            <!--             top:顶对齐、bottom:底对齐、center:中心对齐、baseline:基线对齐-->
            <!--        app:flow_verticalAlign="top｜bottom｜center｜baseline"-->
            <!--            start:开始对齐、end:结尾对齐、center:中心对齐-->
            <!--        app:flow_horizontalAlign="start|end|center"-->
            <TextView
                android:id="@+id/tv28"
                android:layout_marginTop="150dp"
                app:layout_constraintTop_toBottomOf="@id/flow1"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="Flow的对齐约束"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <TextView
                android:id="@+id/tv29"
                android:background="@android:color/holo_blue_light"
                android:text="A"
                android:gravity="center"
                android:textColor="@android:color/holo_red_dark"
                android:layout_width="50dp"
                android:layout_height="50dp"/>
            <TextView
                android:id="@+id/tv30"
                android:background="@android:color/holo_blue_light"
                android:text="B"
                android:gravity="center"
                android:textColor="@android:color/holo_red_dark"
                android:layout_width="20dp"
                android:layout_height="20dp"/>
            <TextView
                android:id="@+id/tv31"
                android:background="@android:color/holo_blue_light"
                android:text="C"
                android:gravity="center"
                android:textColor="@android:color/holo_red_dark"
                android:layout_width="30dp"
                android:layout_height="30dp"/>
            <androidx.constraintlayout.helper.widget.Flow
                app:layout_constraintTop_toBottomOf="@id/tv28"
                app:constraint_referenced_ids="tv29,tv30,tv31"
                app:flow_horizontalAlign="center"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"/>
            <TextView
                android:id="@+id/tv32"
                android:layout_marginTop="150dp"
                app:layout_constraintTop_toBottomOf="@id/tv31"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="Flow的数量约束:实例每行最多2个"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <!--        当flow_wrapMode属性为aligned和chian时，通过flow_maxElementsWrap属性控制每行最大的子View数量-->
            <TextView
                android:id="@+id/tv33"
                android:text="111"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <TextView
                android:id="@+id/tv34"
                android:text="222"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <TextView
                android:id="@+id/tv35"
                android:text="33"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <androidx.constraintlayout.helper.widget.Flow
                app:layout_constraintTop_toBottomOf="@id/tv32"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:constraint_referenced_ids="tv33,tv34,tv35"
                app:flow_wrapMode="chain"
                app:flow_maxElementsWrap="2" />

            <!--        Layer继承自ConstraintHelper，是一个约束助手，常用来增加背景，或者共同动画，图层 (Layer) 在布局期间会调整大小，-->
            <!--        其大小会根据其引用的所有视图进行调整，代码的先后顺序也会决定着它的位置，如果代码在所有引用view的最后面-->
            <!--        ，那么它就会在所有view的最上面，反之则是最下面，在最上面的时候如果添加背景，就会把引用的view覆盖掉-->
            <TextView
                android:id="@+id/tv36"
                app:layout_constraintTop_toBottomOf="@id/tv35"
                app:layout_constraintLeft_toLeftOf="parent"
                android:text="Layer层布局:给多个控件设置背景或动画"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <androidx.constraintlayout.helper.widget.Layer
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:background="@android:color/holo_orange_light"
                android:padding="10dp"
                app:constraint_referenced_ids="DogImg,DogImgName" />
            <ImageView
                android:id="@+id/DogImg"
                android:layout_width="200dp"
                android:layout_height="wrap_content"
                android:src="@drawable/dog"
                android:layout_marginTop="30dp"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/tv36" />
            <TextView
                android:id="@+id/DogImgName"
                android:layout_width="100dp"
                android:layout_height="40dp"
                android:gravity="center"
                android:text="Dog"
                app:layout_constraintEnd_toEndOf="@id/DogImg"
                app:layout_constraintStart_toStartOf="@id/DogImg"
                app:layout_constraintTop_toBottomOf="@id/DogImg" />

            <!--        ImageFilterButton和ImageFilterView可以使用两个属性来设置图片资源的圆角，分别是roundPercent和round，-->
            <!--           roundPercent接受的值类型是0-1的小数，根据数值的大小会使图片在方形和圆形之间按比例过度，round=可以设置具体圆角的大小-->
            <!--        ImageFilterButton和ImageFilterView不但可以使用src来设置图片资源，还可以使用altSrc来设置第二个图片资源，-->
            <!--          altSrc提供的资源将会和src提供的资源通过crossfade属性形成交叉淡化效果,默认情况下，crossfade=0，-->
            <!--          altSrc所引用的资源不可见，取值在0-1-->
            <!--        warmth属性可以用来调节色温，brightness属性用来调节亮度，saturation属性用来调节饱和度，contrast属性用来调节对比度-->
            <TextView
                android:id="@+id/tv37"
                android:layout_width="100dp"
                android:layout_height="40dp"
                android:gravity="center"
                android:text="ImageFilterButton和ImageFilterView"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/DogImg" />
            <androidx.constraintlayout.utils.widget.ImageFilterView
                android:id="@+id/ImageFilterView"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/tv37"
                android:layout_width="100dp"
                android:layout_height="100dp"
                android:src="@drawable/dog"
                app:roundPercent="0.7"
                />
            <TextView
                android:id="@+id/tv38"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:gravity="center"
                android:text="MockView:代码制作原型图"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/ImageFilterView" />
            <!--        MockView:代码制作原型图-->
            <androidx.constraintlayout.utils.widget.MockView
                app:layout_constraintTop_toBottomOf="@id/tv38"
                app:mock_label="原型图"
                android:layout_width="100dp"
                android:layout_height="100dp"/>
        </androidx.constraintlayout.widget.ConstraintLayout>
    </LinearLayout>

</ScrollView>
